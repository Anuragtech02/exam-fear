[{"/home/anurag/vscode/React/exam-fire/src/App.js":"1","/home/anurag/vscode/React/exam-fire/src/components/Home/Home.js":"2","/home/anurag/vscode/React/exam-fire/src/Contexts/GlobalContext.js":"3","/home/anurag/vscode/React/exam-fire/src/components/CustomTabs/CustomTabs.js":"4","/home/anurag/vscode/React/exam-fire/src/components/ViewAnswerModal/ViewAnswerModal.js":"5","/home/anurag/vscode/React/exam-fire/src/components/CustomAccordion/CustomAccordion.js":"6"},{"size":520,"mtime":1611503442622,"results":"7","hashOfConfig":"8"},{"size":12424,"mtime":1611682170513,"results":"9","hashOfConfig":"8"},{"size":4963,"mtime":1611719224962,"results":"10","hashOfConfig":"8"},{"size":3282,"mtime":1611680537317,"results":"11","hashOfConfig":"8"},{"size":872,"mtime":1611677466021,"results":"12","hashOfConfig":"8"},{"size":7553,"mtime":1611721230010,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5ar81x",{"filePath":"16","messages":"17","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/anurag/vscode/React/exam-fire/src/App.js",[],"/home/anurag/vscode/React/exam-fire/src/components/Home/Home.js",["28","29","30","31","32","33","34","35","36","37","38"],"import React, { useContext, useState, useEffect } from \"react\";\nimport styles from \"./Home.module.css\";\nimport {\n  Grid,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  FormControlLabel,\n  Checkbox,\n  TextField,\n  Card,\n  Button,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  DialogActions,\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { GlobalContext } from \"../../Contexts/GlobalContext\";\nimport study from \"../../Assets/study.webp\";\nimport QuestionAnswerSharpIcon from \"@material-ui/icons/QuestionAnswerSharp\";\nimport CustomTabs from \"../CustomTabs/CustomTabs\";\nimport RichTextEditor from \"react-rte\";\nimport Dropzone from \"react-dropzone\";\nimport AddPhotoAlternateIcon from \"@material-ui/icons/AddPhotoAlternate\";\nimport ViewAnswerModal from \"../ViewAnswerModal/ViewAnswerModal\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst Home = () => {\n  const { data, setNewData } = useContext(GlobalContext);\n\n  const [subject, setSubject] = useState(\"Object Oriented Programming\");\n  const [subCode, setSubCode] = useState(\"CER3C2\");\n  const rno = \"19C3xxx\";\n\n  const [questionParts, setQuestionParts] = useState([]);\n\n  const [questions, setQuestions] = useState([]);\n  // const [questBack, setQuestBack] = useState(questions);\n  const [openAnswer, setOpenAnswer] = useState(false);\n  // const [openAnswer, setOpenAnswer] = useState(false);\n  const [viewAnswerModal, setViewAnswerModal] = useState(false);\n  const [markdown, setMarkdown] = useState(\"\");\n\n  useEffect(() => {\n    let qParts = [];\n    data.forEach((item) => {\n      qParts.push(...item.parts);\n    });\n    console.log(qParts);\n    setQuestionParts(qParts);\n    setQuestions(data);\n  }, [data]);\n\n  useEffect(() => {\n    console.log(data);\n  }, [data]);\n\n  // useEffect(() => {\n  //   setQuestions(data);\n  //   // setQuestBack(data);\n  // }, [data]);\n\n  const onChangeSearch = (e, value) => {\n    if (questionParts.indexOf(value) !== -1) {\n      const current = questions;\n      const newData = current.filter(\n        (item) =>\n          item.parts.findIndex(\n            (innerItem) => innerItem.title === value.title\n          ) !== -1\n      );\n      setQuestions(newData);\n      console.log(newData);\n    } else {\n      setQuestions(data);\n    }\n    console.log(value);\n  };\n\n  const handleCloseAnswer = () => {\n    setOpenAnswer(false);\n  };\n\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={2}>\n        <Grid item md={6}>\n          <div className={styles.leftContainer}>\n            <div className={styles.searchContainer}>\n              <div className={styles.title}>\n                <h3>\n                  Don't Stress\n                  <br />\n                  Do Your Best\n                  <b />\n                </h3>\n                <p>\n                  Kuch bhi karo bas answer lao and yaha daldo, let's help each\n                  other.\n                </p>\n              </div>\n              <div className={styles.searchBarContainer}>\n                <Autocomplete\n                  id=\"search\"\n                  // className=\"search-field\"\n                  options={questionParts}\n                  onChange={onChangeSearch}\n                  // onInputValidCapture={onChangeSearch}\n                  // groupBy={false}\n                  className={styles.searchInput}\n                  getOptionLabel={(option) => option.title}\n                  style={{ width: 300 }}\n                  renderInput={(params) => (\n                    <TextField\n                      className={styles.inputElement}\n                      {...params}\n                      label=\"Search\"\n                      variant=\"outlined\"\n                    />\n                  )}\n                />\n              </div>\n            </div>\n          </div>\n        </Grid>\n        <Grid item md={6}>\n          <div className={styles.rightContainer}>\n            <img src={study} alt=\"study\" />\n          </div>\n        </Grid>\n      </Grid>\n      <div className={styles.help}>\n        <div className={styles.helpItem}>\n          <h5>Subject Name</h5>\n          <h4>{subject}</h4>\n        </div>\n        <div className={styles.helpItem}>\n          <h5>Subject Code</h5>\n          <h4>{subCode}</h4>\n        </div>\n        <div className={styles.helpItem}>\n          <h5>Roll No.</h5>\n          <h4>{rno}</h4>\n        </div>\n      </div>\n      <Grid container spacing={2} style={{ margin: \"20px 0\" }}>\n        <Grid item xl={3} lg={4} md={4} sm={6} xs={12}>\n          <Card style={{ height: \"100%\" }}>\n            <Button\n              onClick={() => setOpenAnswer(true)}\n              className={styles.addAnswerBtn}\n            >\n              <QuestionAnswerSharpIcon />\n              &nbsp; Add Answer\n            </Button>\n          </Card>\n        </Grid>\n        {questions.map((item, i) => {\n          return (\n            <Grid key={item.title + i} item xl={3} lg={4} md={4} sm={6} xs={12}>\n              <CardComponent question={item} index={i} />\n            </Grid>\n          );\n        })}\n      </Grid>\n      <AddAnswerModal\n        open={openAnswer}\n        handleClose={handleCloseAnswer}\n        questions={data}\n      />\n      {/* <ViewAnswerModal\n        open={viewAnswerModal}\n        handleClose={() => setViewAnswerModal(false)}\n        markdown={markdown}\n      /> */}\n    </div>\n  );\n};\n\nexport default Home;\n\nconst CardComponent = ({ question, index }) => {\n  return (\n    <Card style={{ height: \"100%\" }}>\n      <div className={styles.cardContainer}>\n        <div className={styles.cardTitle}>\n          <h3 className={styles.qNo}>Q{question.id + 1}.</h3>\n        </div>\n        <div className={styles.parts}>\n          <CustomTabs\n            tab1={question.parts[0]}\n            tab2={question.parts[1]}\n            tab3={question.parts[2]}\n            index={index}\n            complete={question.complete}\n          />\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nconst AddAnswerModal = ({ questions, open, handleClose }) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{\"Add Answer\"}</DialogTitle>\n      <DialogContent>\n        <div className={styles.dialogContent}>\n          {questions.map((question, i) => {\n            return (\n              <div key={\"question\" + i} className={styles.questionContainer}>\n                <h3>Question {i + 1}</h3>\n                {question.parts.map((part) => {\n                  return (\n                    <CustomAccordion\n                      question={part}\n                      questId={question.id}\n                      complete={part.complete}\n                    />\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst CustomAccordion = ({ complete, question, questId }) => {\n  const [textEditor, setTextEditor] = useState(false);\n  const [imageEditor, setImageEditor] = useState(false);\n  const [linkEditor, setLinkEditor] = useState(false);\n\n  const [text, setText] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n\n  const [markdown, setMarkdown] = useState(\"\");\n\n  const changeImageUrl = (file) => {\n    let reader = new FileReader();\n    // setUrl(e.target.files[0]);\n    reader.onloadend = () => {\n      if (reader.result) {\n        setImage(reader.result);\n      } else setImage(\"\");\n    };\n    try {\n      reader.readAsDataURL(file);\n    } catch (error) {\n      setImage(\"\");\n    }\n  };\n\n  const handleImage = (acceptedFile) => {\n    console.log({ acceptedFile });\n    changeImageUrl(acceptedFile[0]);\n  };\n\n  const [md, setMd] = useState(false);\n\n  const { setNewData } = useContext(GlobalContext);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let tempMark = question.answer + \"\\n\\n\";\n    if (text && text.length) {\n      tempMark += text + \"\\n\";\n    }\n    if (image && image.length) {\n      tempMark += `\\n\\n ![question-image](${image})`;\n    }\n    if (link && link.length) {\n      tempMark += `\\n\\n ${link}`;\n    }\n    console.log({ tempMark });\n    setMarkdown(tempMark);\n    setMd(true);\n    setNewData(question, tempMark, questId);\n    setText(\"\");\n    setImage(\"\");\n    setLink(\"\");\n  };\n\n  return (\n    <Accordion className={styles.question}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-label=\"Expand\"\n        aria-controls=\"additional-actions3-content\"\n        id=\"additional-actions3-header\"\n      >\n        <FormControlLabel\n          aria-label=\"Acknowledge\"\n          onClick={(event) => event.stopPropagation()}\n          onFocus={(event) => event.stopPropagation()}\n          control={<Checkbox />}\n          checked={complete}\n          label={question.title}\n        />\n      </AccordionSummary>\n      <AccordionDetails>\n        <form onSubmit={handleSubmit} className={styles.detailsContainer}>\n          {question.answer ? (\n            <div className={styles.mdContainer}>\n              <ReactMarkdown>{question.answer}</ReactMarkdown>\n            </div>\n          ) : null}\n\n          {textEditor && (\n            <textarea\n              required\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n              className={styles.inputField}\n              placeholder=\"Enter Text\"\n            />\n          )}\n          {imageEditor && (\n            <Dropzone\n              multiple={false}\n              onDrop={(acceptedFiles) => handleImage(acceptedFiles)}\n            >\n              {({ getRootProps, getInputProps }) => (\n                <section>\n                  <div {...getRootProps()}>\n                    <input\n                      {...getInputProps()}\n                      className={styles.dropzoneInput}\n                    />\n                    <div className={styles.dropzone}>\n                      <AddPhotoAlternateIcon />\n                      <p>Drag n drop image or click to pick one</p>\n                    </div>\n                  </div>\n                </section>\n              )}\n            </Dropzone>\n          )}\n          {linkEditor && (\n            <input\n              value={link}\n              onChange={(e) => setLink(e.target.value)}\n              className={styles.inputField}\n              placeholder=\"Enter Link\"\n            />\n          )}\n          {/* {md && <ReactMarkdown>{markdown}</ReactMarkdown>} */}\n          <div style={{ width: \"100%\", margin: \"10px 0\" }}>\n            <Grid container spacing={2}>\n              <Grid item md={4}>\n                <Button\n                  onClick={() => setTextEditor(!textEditor)}\n                  variant=\"outlined\"\n                  className={styles.addOptionBtn}\n                >\n                  Text\n                </Button>\n              </Grid>\n              <Grid item md={4}>\n                <Button\n                  onClick={() => setImageEditor(!imageEditor)}\n                  variant=\"outlined\"\n                  className={styles.addOptionBtn}\n                >\n                  Image\n                </Button>\n              </Grid>\n              <Grid item md={4}>\n                <Button\n                  onClick={() => setLinkEditor(!linkEditor)}\n                  variant=\"outlined\"\n                  className={styles.addOptionBtn}\n                >\n                  Link\n                </Button>\n              </Grid>\n            </Grid>\n          </div>\n          <div className={styles.btnContainer}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              className={styles.submitBtn}\n            >\n              Submit\n            </Button>\n          </div>\n        </form>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nconst CustomEditor = (props) => {\n  const [value, setValue] = useState(RichTextEditor.createEmptyValue());\n  const onChange = (value) => {\n    setValue(value);\n    if (props.onChange) {\n      props.onChange(value.toString(\"html\"));\n    }\n  };\n  return (\n    <RichTextEditor\n      value={value}\n      onChange={onChange}\n      multiline\n      variant=\"filled\"\n    />\n  );\n};\n","/home/anurag/vscode/React/exam-fire/src/Contexts/GlobalContext.js",["39"],"/home/anurag/vscode/React/exam-fire/src/components/CustomTabs/CustomTabs.js",["40"],"import React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Tabs } from \"antd\";\nimport { Button } from \"@material-ui/core\";\nimport styles from \"./CustomTabs.module.css\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ReportProblemIcon from \"@material-ui/icons/ReportProblem\";\nimport ViewAnswerModal from \"../ViewAnswerModal/ViewAnswerModal\";\n\nconst { TabPane } = Tabs;\n\nconst CustomTabs = ({ tab1, tab2, tab3, index, complete }) => {\n  const [viewAnswerModal, setViewAnswerModal] = useState(false);\n  const [markdown, setMarkdown] = useState(\"\");\n\n  const handleClickView = (md) => {\n    // if (md) {\n    setMarkdown(md);\n    setViewAnswerModal(true);\n    // }\n  };\n\n  return (\n    <>\n      <Tabs\n        type=\"card\"\n        tabPosition=\"bottom\"\n        //   tabBarExtraContent={<QNo index={index} />}\n        style={{ width: \"100%\" }}\n      >\n        <TabPane tab=\"A\" key=\"1\">\n          <div className={styles.tabContainer}>\n            <div className={styles.cardTitle}>\n              <h3>{tab1.title}</h3>\n            </div>\n            <div className={styles.btnContainer}>\n              <Button\n                onClick={() => handleClickView(tab1.answer)}\n                variant=\"outlined\"\n                className={styles.answerBtn}\n              >\n                View Answer\n              </Button>\n              {complete ? (\n                <CheckIcon />\n              ) : (\n                <ReportProblemIcon className={styles.reportIcon} />\n              )}\n            </div>\n          </div>\n        </TabPane>\n        <TabPane tab=\"B\" key=\"2\">\n          <div className={styles.tabContainer}>\n            <div className={styles.cardTitle}>\n              <h3>{tab2.title}</h3>\n            </div>\n            <div className={styles.btnContainer}>\n              <Button\n                onClick={() => handleClickView(tab2.answer)}\n                variant=\"outlined\"\n                className={styles.answerBtn}\n              >\n                View Answer\n              </Button>\n              {complete ? (\n                <CheckIcon />\n              ) : (\n                <ReportProblemIcon className={styles.reportIcon} />\n              )}{\" \"}\n            </div>\n          </div>\n        </TabPane>\n        <TabPane tab=\"C\" key=\"3\">\n          <div className={styles.tabContainer}>\n            <div className={styles.cardTitle}>\n              <h3>{tab3.title}</h3>\n            </div>\n            <div className={styles.btnContainer}>\n              <Button\n                onClick={() => handleClickView(tab3.answer)}\n                variant=\"outlined\"\n                className={styles.answerBtn}\n              >\n                View Answer\n              </Button>\n              {complete ? (\n                <CheckIcon />\n              ) : (\n                <ReportProblemIcon className={styles.reportIcon} />\n              )}\n            </div>\n          </div>\n        </TabPane>\n      </Tabs>\n      <ViewAnswerModal\n        open={viewAnswerModal}\n        handleClose={() => setViewAnswerModal(false)}\n        markdown={markdown}\n      />\n    </>\n  );\n};\n\nexport default CustomTabs;\n\nconst QNo = ({ index }) => {\n  return (\n    <div className={styles.qContainer}>\n      <h3 className={styles.qNo}>Q{index + 1}.</h3>\n    </div>\n  );\n};\n","/home/anurag/vscode/React/exam-fire/src/components/ViewAnswerModal/ViewAnswerModal.js",[],"/home/anurag/vscode/React/exam-fire/src/components/CustomAccordion/CustomAccordion.js",["41","42"],{"ruleId":"43","severity":1,"message":"44","line":27,"column":8,"nodeType":"45","messageId":"46","endLine":27,"endColumn":23},{"ruleId":"43","severity":1,"message":"47","line":31,"column":17,"nodeType":"45","messageId":"46","endLine":31,"endColumn":27},{"ruleId":"43","severity":1,"message":"48","line":33,"column":19,"nodeType":"45","messageId":"46","endLine":33,"endColumn":29},{"ruleId":"43","severity":1,"message":"49","line":34,"column":19,"nodeType":"45","messageId":"46","endLine":34,"endColumn":29},{"ruleId":"43","severity":1,"message":"50","line":43,"column":10,"nodeType":"45","messageId":"46","endLine":43,"endColumn":25},{"ruleId":"43","severity":1,"message":"51","line":43,"column":27,"nodeType":"45","messageId":"46","endLine":43,"endColumn":45},{"ruleId":"43","severity":1,"message":"52","line":44,"column":10,"nodeType":"45","messageId":"46","endLine":44,"endColumn":18},{"ruleId":"43","severity":1,"message":"53","line":44,"column":20,"nodeType":"45","messageId":"46","endLine":44,"endColumn":31},{"ruleId":"43","severity":1,"message":"52","line":252,"column":10,"nodeType":"45","messageId":"46","endLine":252,"endColumn":18},{"ruleId":"43","severity":1,"message":"54","line":274,"column":10,"nodeType":"45","messageId":"46","endLine":274,"endColumn":12},{"ruleId":"43","severity":1,"message":"55","line":409,"column":7,"nodeType":"45","messageId":"46","endLine":409,"endColumn":19},{"ruleId":"43","severity":1,"message":"56","line":1,"column":42,"nodeType":"45","messageId":"46","endLine":1,"endColumn":51},{"ruleId":"43","severity":1,"message":"57","line":106,"column":7,"nodeType":"45","messageId":"46","endLine":106,"endColumn":10},{"ruleId":"43","severity":1,"message":"52","line":29,"column":10,"nodeType":"45","messageId":"46","endLine":29,"endColumn":18},{"ruleId":"43","severity":1,"message":"54","line":87,"column":10,"nodeType":"45","messageId":"46","endLine":87,"endColumn":12},"no-unused-vars","'ViewAnswerModal' is defined but never used.","Identifier","unusedVar","'setNewData' is assigned a value but never used.","'setSubject' is assigned a value but never used.","'setSubCode' is assigned a value but never used.","'viewAnswerModal' is assigned a value but never used.","'setViewAnswerModal' is assigned a value but never used.","'markdown' is assigned a value but never used.","'setMarkdown' is assigned a value but never used.","'md' is assigned a value but never used.","'CustomEditor' is assigned a value but never used.","'useEffect' is defined but never used.","'QNo' is assigned a value but never used."]