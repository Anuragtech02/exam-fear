[{"/home/anurag/vscode/React/exam-fire/src/App.js":"1","/home/anurag/vscode/React/exam-fire/src/components/Home/Home.js":"2","/home/anurag/vscode/React/exam-fire/src/Contexts/GlobalContext.js":"3","/home/anurag/vscode/React/exam-fire/src/components/CustomTabs/CustomTabs.js":"4","/home/anurag/vscode/React/exam-fire/src/components/ViewAnswerModal/ViewAnswerModal.js":"5","/home/anurag/vscode/React/exam-fire/src/components/CustomAccordion/CustomAccordion.js":"6","/home/anurag/vscode/React/exam-fire/src/Firebase/firebase.js":"7","/home/anurag/vscode/React/exam-fire/src/index.js":"8","/home/anurag/vscode/React/exam-fire/src/Assets/test.js":"9"},{"size":6098,"mtime":1611770290185,"results":"10","hashOfConfig":"11"},{"size":9060,"mtime":1611770528141,"results":"12","hashOfConfig":"11"},{"size":8112,"mtime":1611766409416,"results":"13","hashOfConfig":"11"},{"size":3282,"mtime":1611680537317,"results":"14","hashOfConfig":"11"},{"size":963,"mtime":1611722266308,"results":"15","hashOfConfig":"11"},{"size":8319,"mtime":1611725596334,"results":"16","hashOfConfig":"11"},{"size":467,"mtime":1611723987112,"results":"17","hashOfConfig":"11"},{"size":146,"mtime":1611501823677,"results":"18","hashOfConfig":"11"},{"size":2685,"mtime":1611768387404,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5ar81x",{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/anurag/vscode/React/exam-fire/src/App.js",[],"/home/anurag/vscode/React/exam-fire/src/components/Home/Home.js",["40","41","42","43","44","45"],"/home/anurag/vscode/React/exam-fire/src/Contexts/GlobalContext.js",["46"],"/home/anurag/vscode/React/exam-fire/src/components/CustomTabs/CustomTabs.js",["47"],"import React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Tabs } from \"antd\";\nimport { Button } from \"@material-ui/core\";\nimport styles from \"./CustomTabs.module.css\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ReportProblemIcon from \"@material-ui/icons/ReportProblem\";\nimport ViewAnswerModal from \"../ViewAnswerModal/ViewAnswerModal\";\n\nconst { TabPane } = Tabs;\n\nconst CustomTabs = ({ tab1, tab2, tab3, index, complete }) => {\n  const [viewAnswerModal, setViewAnswerModal] = useState(false);\n  const [markdown, setMarkdown] = useState(\"\");\n\n  const handleClickView = (md) => {\n    // if (md) {\n    setMarkdown(md);\n    setViewAnswerModal(true);\n    // }\n  };\n\n  return (\n    <>\n      <Tabs\n        type=\"card\"\n        tabPosition=\"bottom\"\n        //   tabBarExtraContent={<QNo index={index} />}\n        style={{ width: \"100%\" }}\n      >\n        <TabPane tab=\"A\" key=\"1\">\n          <div className={styles.tabContainer}>\n            <div className={styles.cardTitle}>\n              <h3>{tab1.title}</h3>\n            </div>\n            <div className={styles.btnContainer}>\n              <Button\n                onClick={() => handleClickView(tab1.answer)}\n                variant=\"outlined\"\n                className={styles.answerBtn}\n              >\n                View Answer\n              </Button>\n              {complete ? (\n                <CheckIcon />\n              ) : (\n                <ReportProblemIcon className={styles.reportIcon} />\n              )}\n            </div>\n          </div>\n        </TabPane>\n        <TabPane tab=\"B\" key=\"2\">\n          <div className={styles.tabContainer}>\n            <div className={styles.cardTitle}>\n              <h3>{tab2.title}</h3>\n            </div>\n            <div className={styles.btnContainer}>\n              <Button\n                onClick={() => handleClickView(tab2.answer)}\n                variant=\"outlined\"\n                className={styles.answerBtn}\n              >\n                View Answer\n              </Button>\n              {complete ? (\n                <CheckIcon />\n              ) : (\n                <ReportProblemIcon className={styles.reportIcon} />\n              )}{\" \"}\n            </div>\n          </div>\n        </TabPane>\n        <TabPane tab=\"C\" key=\"3\">\n          <div className={styles.tabContainer}>\n            <div className={styles.cardTitle}>\n              <h3>{tab3.title}</h3>\n            </div>\n            <div className={styles.btnContainer}>\n              <Button\n                onClick={() => handleClickView(tab3.answer)}\n                variant=\"outlined\"\n                className={styles.answerBtn}\n              >\n                View Answer\n              </Button>\n              {complete ? (\n                <CheckIcon />\n              ) : (\n                <ReportProblemIcon className={styles.reportIcon} />\n              )}\n            </div>\n          </div>\n        </TabPane>\n      </Tabs>\n      <ViewAnswerModal\n        open={viewAnswerModal}\n        handleClose={() => setViewAnswerModal(false)}\n        markdown={markdown}\n      />\n    </>\n  );\n};\n\nexport default CustomTabs;\n\nconst QNo = ({ index }) => {\n  return (\n    <div className={styles.qContainer}>\n      <h3 className={styles.qNo}>Q{index + 1}.</h3>\n    </div>\n  );\n};\n","/home/anurag/vscode/React/exam-fire/src/components/ViewAnswerModal/ViewAnswerModal.js",[],"/home/anurag/vscode/React/exam-fire/src/components/CustomAccordion/CustomAccordion.js",["48","49"],"import React, { useState, useContext } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport AddPhotoAlternateIcon from \"@material-ui/icons/AddPhotoAlternate\";\nimport { GlobalContext } from \"../../Contexts/GlobalContext\";\nimport {\n  Grid,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  FormControlLabel,\n  Checkbox,\n  Button,\n  IconButton,\n  Tooltip,\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport styles from \"./CustomAccordion.module.css\";\nimport imageCompression from \"browser-image-compression\";\nimport ReactMarkdown from \"react-markdown\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst CustomAccordion = ({ complete, question, questId }) => {\n  const [textEditor, setTextEditor] = useState(false);\n  const [imageEditor, setImageEditor] = useState(false);\n  const [linkEditor, setLinkEditor] = useState(false);\n\n  const [text, setText] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [imageFile, setImageFile] = useState(null);\n\n  const [markdown, setMarkdown] = useState(\"\");\n\n  const handleImageUpload = async (file) => {\n    const imageFile = file;\n    console.log(\"originalFile instanceof Blob\", imageFile instanceof Blob); // true\n    console.log(`originalFile size ${imageFile.size / 1024 / 1024} MB`);\n\n    const options = {\n      maxSizeMB: 0.6,\n      maxWidthOrHeight: 1000,\n      useWebWorker: true,\n    };\n    try {\n      const compressedFile = await imageCompression(imageFile, options);\n      // console.log(\n      //   \"compressedFile instanceof Blob\",\n      //   compressedFile instanceof Blob\n      // ); // true\n      // console.log(\n      //   `compressedFile size ${compressedFile.size / 1024 / 1024} MB`\n      // ); // smaller than maxSizeMB\n      // console.log({ compressedFile });\n      const res = await imageCompression.getDataUrlFromFile(compressedFile);\n      // console.log({ res });\n      setImage(res);\n\n      // await uploadToServer(compressedFile); // write your own logic\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // const changeImageUrl = (file) => {\n  //   let reader = new FileReader();\n  //   // setUrl(e.target.files[0]);\n  //   reader.onloadend = () => {\n  //     if (reader.result) {\n  //       setImage(reader.result);\n  //     } else setImage(\"\");\n  //   };\n  //   try {\n  //     reader.readAsDataURL(file);\n  //   } catch (error) {\n  //     setImage(\"\");\n  //   }\n  // };\n\n  const handleImage = (acceptedFile) => {\n    // console.log({ acceptedFile });\n    // changeImageUrl(acceptedFile[0]);\n    if (isFileImage(acceptedFile[0])) {\n      setImageFile(acceptedFile[0]);\n      handleImageUpload(acceptedFile[0]);\n    } else {\n      alert(\"Please upload only images\");\n    }\n  };\n\n  const [md, setMd] = useState(false);\n\n  const { setNewData, deleteAnswer } = useContext(GlobalContext);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let tempMark = question.answer;\n    if (text && text.length) {\n      tempMark += \"\\n\\n\" + text;\n    }\n    if (image && image.length) {\n      tempMark += `\\n\\n ![question-image](${image})`;\n    }\n    if (link && link.length) {\n      tempMark += `\\n\\n [${link}](${link})`;\n    }\n    if (imageEditor && !image && !image.length) {\n      alert(\"Please select an image to upload\");\n      return;\n    }\n    console.log({ tempMark });\n    setMarkdown(tempMark);\n    setMd(true);\n    setNewData(question, tempMark, questId);\n    setText(\"\");\n    setImage(\"\");\n    setLink(\"\");\n    setImageFile(null);\n  };\n\n  const handleClickDelete = () => {\n    //Delete answer from globalContext\n    deleteAnswer(question, questId);\n  };\n\n  return (\n    <Accordion className={styles.question}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-label=\"Expand\"\n        aria-controls=\"additional-actions3-content\"\n        id=\"additional-actions3-header\"\n      >\n        <FormControlLabel\n          aria-label=\"Acknowledge\"\n          onClick={(event) => event.stopPropagation()}\n          onFocus={(event) => event.stopPropagation()}\n          control={<Checkbox />}\n          checked={complete}\n          label={question.title}\n        />\n      </AccordionSummary>\n      <AccordionDetails>\n        <form onSubmit={handleSubmit} className={styles.detailsContainer}>\n          <div className={styles.prevAnswer}>\n            {question.answer ? (\n              <div className={styles.mdContainer}>\n                <ReactMarkdown>{question.answer}</ReactMarkdown>\n              </div>\n            ) : null}\n            {question.answer && (\n              <div className={styles.delIcon}>\n                <Tooltip placement=\"top\" title=\"Delete Answer\">\n                  <IconButton onClick={handleClickDelete}>\n                    <DeleteIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              </div>\n            )}\n          </div>\n\n          {textEditor && (\n            <textarea\n              required\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n              className={styles.inputField}\n              placeholder=\"Enter Text\"\n            />\n          )}\n          {imageEditor && (\n            <Dropzone\n              multiple={false}\n              onDrop={(acceptedFiles) => handleImage(acceptedFiles)}\n              accept=\".jpg, .jpeg, .png, .webp, .gif,\"\n            >\n              {({ getRootProps, getInputProps }) => (\n                <section>\n                  <div {...getRootProps()}>\n                    <input\n                      {...getInputProps()}\n                      className={styles.dropzoneInput}\n                    />\n                    <div className={styles.dropzone}>\n                      <AddPhotoAlternateIcon />\n                      <p>\n                        {imageFile\n                          ? `You selected ${imageFile.name}`\n                          : \"Drag n drop image or click to pick one\"}\n                      </p>\n                    </div>\n                  </div>\n                </section>\n              )}\n            </Dropzone>\n          )}\n          {linkEditor && (\n            <input\n              required\n              value={link}\n              onChange={(e) => setLink(e.target.value)}\n              className={styles.inputField}\n              placeholder=\"Enter Link\"\n            />\n          )}\n          {/* {md && <ReactMarkdown>{markdown}</ReactMarkdown>} */}\n          <div style={{ width: \"100%\", margin: \"10px 0\" }}>\n            <Grid container spacing={2}>\n              <Grid item md={4}>\n                <Button\n                  onClick={() => {\n                    setTextEditor(!textEditor);\n                    setText(\"\");\n                  }}\n                  variant=\"outlined\"\n                  className={styles.addOptionBtn}\n                >\n                  Text\n                </Button>\n              </Grid>\n              <Grid item md={4}>\n                <Button\n                  onClick={() => {\n                    setImageEditor(!imageEditor);\n                    setImage(\"\");\n                    setImageFile(null);\n                  }}\n                  variant=\"outlined\"\n                  className={styles.addOptionBtn}\n                >\n                  Image\n                </Button>\n              </Grid>\n              <Grid item md={4}>\n                <Button\n                  onClick={() => {\n                    setLinkEditor(!linkEditor);\n                    setLink(\"\");\n                  }}\n                  variant=\"outlined\"\n                  className={styles.addOptionBtn}\n                >\n                  Link\n                </Button>\n              </Grid>\n            </Grid>\n          </div>\n          <div className={styles.btnContainer}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              className={styles.submitBtn}\n            >\n              Submit\n            </Button>\n          </div>\n        </form>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default CustomAccordion;\n\nconst isFileImage = (file) => {\n  const acceptedImageTypes = [\n    \"image/jpeg\",\n    \"image/png\",\n    \"image/webp\",\n    \"image/jpg\",\n    \"image/gif\",\n  ];\n\n  return file && acceptedImageTypes.includes(file[\"type\"]);\n};\n","/home/anurag/vscode/React/exam-fire/src/Firebase/firebase.js",[],"/home/anurag/vscode/React/exam-fire/src/index.js",[],"/home/anurag/vscode/React/exam-fire/src/Assets/test.js",[],{"ruleId":"50","severity":1,"message":"51","line":13,"column":8,"nodeType":"52","messageId":"53","endLine":13,"endColumn":22},{"ruleId":"50","severity":1,"message":"54","line":19,"column":8,"nodeType":"52","messageId":"53","endLine":19,"endColumn":23},{"ruleId":"50","severity":1,"message":"55","line":42,"column":10,"nodeType":"52","messageId":"53","endLine":42,"endColumn":25},{"ruleId":"50","severity":1,"message":"56","line":42,"column":27,"nodeType":"52","messageId":"53","endLine":42,"endColumn":45},{"ruleId":"50","severity":1,"message":"57","line":43,"column":10,"nodeType":"52","messageId":"53","endLine":43,"endColumn":18},{"ruleId":"50","severity":1,"message":"58","line":43,"column":20,"nodeType":"52","messageId":"53","endLine":43,"endColumn":31},{"ruleId":"50","severity":1,"message":"59","line":22,"column":13,"nodeType":"52","messageId":"53","endLine":22,"endColumn":18},{"ruleId":"50","severity":1,"message":"60","line":106,"column":7,"nodeType":"52","messageId":"53","endLine":106,"endColumn":10},{"ruleId":"50","severity":1,"message":"57","line":32,"column":10,"nodeType":"52","messageId":"53","endLine":32,"endColumn":18},{"ruleId":"50","severity":1,"message":"61","line":90,"column":10,"nodeType":"52","messageId":"53","endLine":90,"endColumn":12},"no-unused-vars","'ExpandMoreIcon' is defined but never used.","Identifier","unusedVar","'ViewAnswerModal' is defined but never used.","'viewAnswerModal' is assigned a value but never used.","'setViewAnswerModal' is assigned a value but never used.","'markdown' is assigned a value but never used.","'setMarkdown' is assigned a value but never used.","'dbRef' is assigned a value but never used.","'QNo' is assigned a value but never used.","'md' is assigned a value but never used."]