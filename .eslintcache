[{"/home/anurag/vscode/React/exam-fire/src/App.js":"1","/home/anurag/vscode/React/exam-fire/src/components/Home/Home.js":"2","/home/anurag/vscode/React/exam-fire/src/Contexts/GlobalContext.js":"3","/home/anurag/vscode/React/exam-fire/src/components/CustomTabs/CustomTabs.js":"4","/home/anurag/vscode/React/exam-fire/src/components/ViewAnswerModal/ViewAnswerModal.js":"5","/home/anurag/vscode/React/exam-fire/src/components/CustomAccordion/CustomAccordion.js":"6","/home/anurag/vscode/React/exam-fire/src/Firebase/firebase.js":"7","/home/anurag/vscode/React/exam-fire/src/index.js":"8","/home/anurag/vscode/React/exam-fire/src/Assets/test.js":"9"},{"size":6098,"mtime":1611770290185,"results":"10","hashOfConfig":"11"},{"size":9060,"mtime":1611770528141,"results":"12","hashOfConfig":"11"},{"size":8112,"mtime":1611766409416,"results":"13","hashOfConfig":"11"},{"size":3282,"mtime":1611680537317,"results":"14","hashOfConfig":"11"},{"size":963,"mtime":1611722266308,"results":"15","hashOfConfig":"11"},{"size":8319,"mtime":1611725596334,"results":"16","hashOfConfig":"11"},{"size":467,"mtime":1611723987112,"results":"17","hashOfConfig":"11"},{"size":146,"mtime":1611501823677,"results":"18","hashOfConfig":"11"},{"size":2685,"mtime":1611768387404,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5ar81x",{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/anurag/vscode/React/exam-fire/src/App.js",[],"/home/anurag/vscode/React/exam-fire/src/components/Home/Home.js",["41","42","43","44","45","46"],"import React, { useContext, useState, useEffect } from \"react\";\nimport styles from \"./Home.module.css\";\nimport {\n  Grid,\n  TextField,\n  Card,\n  Button,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  DialogActions,\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { GlobalContext } from \"../../Contexts/GlobalContext\";\nimport study from \"../../Assets/study.webp\";\nimport QuestionAnswerSharpIcon from \"@material-ui/icons/QuestionAnswerSharp\";\nimport CustomTabs from \"../CustomTabs/CustomTabs\";\nimport ViewAnswerModal from \"../ViewAnswerModal/ViewAnswerModal\";\nimport CustomAccordion from \"../CustomAccordion/CustomAccordion\";\nimport { useParams, withRouter } from \"react-router\";\nimport firebase from \"../../Firebase/firebase\";\n\nconst Home = ({ history }) => {\n  const { data, rno, subject, subCode, setYear, setBranch } = useContext(\n    GlobalContext\n  );\n\n  // const [subject, setSubject] = useState(\"Object Oriented Programming\");\n  // const [subCode, setSubCode] = useState(\"CER3C2\");\n  // const rno = \"19C3xxx\";\n\n  const { branch, year } = useParams();\n\n  const [questionParts, setQuestionParts] = useState([]);\n\n  const [questions, setQuestions] = useState([]);\n  const [questionsBack, setQuestionsBack] = useState([]);\n  // const [questBack, setQuestBack] = useState(questions);\n  const [openAnswer, setOpenAnswer] = useState(false);\n  // const [openAnswer, setOpenAnswer] = useState(false);\n  const [viewAnswerModal, setViewAnswerModal] = useState(false);\n  const [markdown, setMarkdown] = useState(\"\");\n\n  useEffect(() => {\n    setBranch(branch);\n    setYear(year);\n  }, [branch, year, setBranch, setYear]);\n\n  useEffect(() => {\n    let qParts = [];\n    if (data && data.length) {\n      data.forEach((item) => {\n        qParts.push(...item.parts);\n      });\n      // console.log(qParts);\n      setQuestionParts(qParts);\n      setQuestions(data);\n      setQuestionsBack(data);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    console.log(data);\n    console.log(\"Changed\");\n  }, [data]);\n\n  useEffect(() => {\n    const check = async () => {\n      const db = firebase.database();\n      const dbRef = db.ref(`${year}/${branch}`);\n      const status = (await dbRef.once(\"value\")).exists();\n      if (!status) {\n        history.push(`/${year}/${branch}/enter-details`);\n      }\n    };\n    check();\n  }, [branch, year, history]);\n\n  // useEffect(() => {\n  //   setQuestions(data);\n  //   // setQuestBack(data);\n  // }, [data]);\n\n  const onChangeSearch = (e, value) => {\n    if (questionParts.indexOf(value) !== -1) {\n      const current = questionsBack;\n      const newData = current.filter(\n        (item) =>\n          item.parts.findIndex(\n            (innerItem) => innerItem.title === value.title\n          ) !== -1\n      );\n      setQuestions(newData);\n      console.log(newData);\n    } else {\n      setQuestions(data);\n    }\n    console.log(value);\n  };\n\n  const handleCloseAnswer = () => {\n    setOpenAnswer(false);\n  };\n\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={2}>\n        <Grid item md={6}>\n          <div className={styles.leftContainer}>\n            <div className={styles.searchContainer}>\n              <div className={styles.title}>\n                <h3>\n                  Don't Stress\n                  <br />\n                  Do Your Best\n                  <b />\n                </h3>\n                <p>\n                  Kuch bhi karo bas answer lao and yaha daldo, let's help each\n                  other.\n                </p>\n              </div>\n              <div className={styles.searchBarContainer}>\n                <Autocomplete\n                  id=\"search\"\n                  // className=\"search-field\"\n                  options={questionParts}\n                  onChange={onChangeSearch}\n                  // onInputValidCapture={onChangeSearch}\n                  // groupBy={false}\n                  className={styles.searchInput}\n                  getOptionLabel={(option) => option.title}\n                  style={{ width: 300 }}\n                  renderInput={(params) => (\n                    <TextField\n                      className={styles.inputElement}\n                      {...params}\n                      label=\"Search\"\n                      variant=\"outlined\"\n                    />\n                  )}\n                />\n              </div>\n            </div>\n          </div>\n        </Grid>\n        <Grid item md={6}>\n          <div className={styles.rightContainer}>\n            <img src={study} alt=\"study\" />\n          </div>\n        </Grid>\n      </Grid>\n      <Grid container spacing={2}>\n        <Grid item lg={3} md={3} sm={4} xs={6}>\n          <div className={styles.helpItem}>\n            <h5>Subject Name</h5>\n            <h4>{subject}</h4>\n          </div>\n        </Grid>\n        <Grid item lg={2} md={3} sm={4} xs={6}>\n          <div className={styles.helpItem}>\n            <h5>Subject Code</h5>\n            <h4>{subCode}</h4>\n          </div>\n        </Grid>\n        <Grid item lg={3} md={3} sm={4} xs={6}>\n          <div className={styles.helpItem}>\n            <h5>Roll No.</h5>\n            <h4>{rno}</h4>\n          </div>\n        </Grid>\n      </Grid>\n      {/* <div className={styles.help}>\n        <div className={styles.helpItem}>\n          <h5>Subject Name</h5>\n          <h4>{subject}</h4>\n        </div>\n        <div className={styles.helpItem}>\n          <h5>Subject Code</h5>\n          <h4>{subCode}</h4>\n        </div>\n        <div className={styles.helpItem}>\n          <h5>Roll No.</h5>\n          <h4>{rno}</h4>\n        </div>\n      </div> */}\n      <div className={styles.contentQuestion}>\n        <Grid container spacing={2}>\n          <Grid item xl={3} lg={4} md={4} sm={6} xs={12}>\n            <Card style={{ height: \"100%\", width: \"100%\" }}>\n              <Button\n                onClick={() => setOpenAnswer(true)}\n                className={styles.addAnswerBtn}\n              >\n                <QuestionAnswerSharpIcon />\n                &nbsp; Add Answer\n              </Button>\n            </Card>\n          </Grid>\n          {questions ? (\n            questions.map((item, i) => {\n              return (\n                <Grid\n                  key={\"question-paper\" + i}\n                  item\n                  xl={3}\n                  lg={4}\n                  md={4}\n                  sm={6}\n                  xs={12}\n                >\n                  <CardComponent question={item} index={i} />\n                </Grid>\n              );\n            })\n          ) : (\n            <Grid item>\n              <div>\n                <p>\n                  Seems like your questions have not been added yet, Please\n                  contact admin\n                </p>\n              </div>\n            </Grid>\n          )}\n        </Grid>\n      </div>\n\n      <AddAnswerModal\n        open={openAnswer}\n        handleClose={handleCloseAnswer}\n        questions={questions}\n      />\n      {/* <ViewAnswerModal\n        open={viewAnswerModal}\n        handleClose={() => setViewAnswerModal(false)}\n        markdown={markdown}\n      /> */}\n    </div>\n  );\n};\n\nexport default withRouter(Home);\n\nconst CardComponent = ({ question, index }) => {\n  return (\n    <Card style={{ height: \"100%\" }}>\n      <div className={styles.cardContainer}>\n        <div className={styles.cardTitle}>\n          <h3 className={styles.qNo}>Q{question.id + 1}.</h3>\n        </div>\n        <div className={styles.parts}>\n          <CustomTabs\n            tab1={question.parts[0]}\n            tab2={question.parts[1]}\n            tab3={question.parts[2]}\n            index={index}\n            complete={question.complete}\n          />\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nconst AddAnswerModal = ({ questions, open, handleClose }) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n      fullWidth\n    >\n      <DialogTitle id=\"alert-dialog-title\">{\"Add Answer\"}</DialogTitle>\n      <DialogContent>\n        <div className={styles.dialogContent}>\n          {questions &&\n            questions.map((question, i) => {\n              return (\n                <div\n                  key={\"question-answer\" + i}\n                  className={styles.questionContainer}\n                >\n                  <h3>Question {i + 1}</h3>\n                  {question.parts.map((part, index) => {\n                    return (\n                      <CustomAccordion\n                        key={part.title}\n                        question={part}\n                        questId={question.id}\n                        complete={part.complete}\n                      />\n                    );\n                  })}\n                </div>\n              );\n            })}\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","/home/anurag/vscode/React/exam-fire/src/Contexts/GlobalContext.js",["47"],"/home/anurag/vscode/React/exam-fire/src/components/CustomTabs/CustomTabs.js",["48"],"import React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Tabs } from \"antd\";\nimport { Button } from \"@material-ui/core\";\nimport styles from \"./CustomTabs.module.css\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ReportProblemIcon from \"@material-ui/icons/ReportProblem\";\nimport ViewAnswerModal from \"../ViewAnswerModal/ViewAnswerModal\";\n\nconst { TabPane } = Tabs;\n\nconst CustomTabs = ({ tab1, tab2, tab3, index, complete }) => {\n  const [viewAnswerModal, setViewAnswerModal] = useState(false);\n  const [markdown, setMarkdown] = useState(\"\");\n\n  const handleClickView = (md) => {\n    // if (md) {\n    setMarkdown(md);\n    setViewAnswerModal(true);\n    // }\n  };\n\n  return (\n    <>\n      <Tabs\n        type=\"card\"\n        tabPosition=\"bottom\"\n        //   tabBarExtraContent={<QNo index={index} />}\n        style={{ width: \"100%\" }}\n      >\n        <TabPane tab=\"A\" key=\"1\">\n          <div className={styles.tabContainer}>\n            <div className={styles.cardTitle}>\n              <h3>{tab1.title}</h3>\n            </div>\n            <div className={styles.btnContainer}>\n              <Button\n                onClick={() => handleClickView(tab1.answer)}\n                variant=\"outlined\"\n                className={styles.answerBtn}\n              >\n                View Answer\n              </Button>\n              {complete ? (\n                <CheckIcon />\n              ) : (\n                <ReportProblemIcon className={styles.reportIcon} />\n              )}\n            </div>\n          </div>\n        </TabPane>\n        <TabPane tab=\"B\" key=\"2\">\n          <div className={styles.tabContainer}>\n            <div className={styles.cardTitle}>\n              <h3>{tab2.title}</h3>\n            </div>\n            <div className={styles.btnContainer}>\n              <Button\n                onClick={() => handleClickView(tab2.answer)}\n                variant=\"outlined\"\n                className={styles.answerBtn}\n              >\n                View Answer\n              </Button>\n              {complete ? (\n                <CheckIcon />\n              ) : (\n                <ReportProblemIcon className={styles.reportIcon} />\n              )}{\" \"}\n            </div>\n          </div>\n        </TabPane>\n        <TabPane tab=\"C\" key=\"3\">\n          <div className={styles.tabContainer}>\n            <div className={styles.cardTitle}>\n              <h3>{tab3.title}</h3>\n            </div>\n            <div className={styles.btnContainer}>\n              <Button\n                onClick={() => handleClickView(tab3.answer)}\n                variant=\"outlined\"\n                className={styles.answerBtn}\n              >\n                View Answer\n              </Button>\n              {complete ? (\n                <CheckIcon />\n              ) : (\n                <ReportProblemIcon className={styles.reportIcon} />\n              )}\n            </div>\n          </div>\n        </TabPane>\n      </Tabs>\n      <ViewAnswerModal\n        open={viewAnswerModal}\n        handleClose={() => setViewAnswerModal(false)}\n        markdown={markdown}\n      />\n    </>\n  );\n};\n\nexport default CustomTabs;\n\nconst QNo = ({ index }) => {\n  return (\n    <div className={styles.qContainer}>\n      <h3 className={styles.qNo}>Q{index + 1}.</h3>\n    </div>\n  );\n};\n","/home/anurag/vscode/React/exam-fire/src/components/ViewAnswerModal/ViewAnswerModal.js",[],"/home/anurag/vscode/React/exam-fire/src/components/CustomAccordion/CustomAccordion.js",["49","50"],"import React, { useState, useContext } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport AddPhotoAlternateIcon from \"@material-ui/icons/AddPhotoAlternate\";\nimport { GlobalContext } from \"../../Contexts/GlobalContext\";\nimport {\n  Grid,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  FormControlLabel,\n  Checkbox,\n  Button,\n  IconButton,\n  Tooltip,\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport styles from \"./CustomAccordion.module.css\";\nimport imageCompression from \"browser-image-compression\";\nimport ReactMarkdown from \"react-markdown\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst CustomAccordion = ({ complete, question, questId }) => {\n  const [textEditor, setTextEditor] = useState(false);\n  const [imageEditor, setImageEditor] = useState(false);\n  const [linkEditor, setLinkEditor] = useState(false);\n\n  const [text, setText] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [imageFile, setImageFile] = useState(null);\n\n  const [markdown, setMarkdown] = useState(\"\");\n\n  const handleImageUpload = async (file) => {\n    const imageFile = file;\n    console.log(\"originalFile instanceof Blob\", imageFile instanceof Blob); // true\n    console.log(`originalFile size ${imageFile.size / 1024 / 1024} MB`);\n\n    const options = {\n      maxSizeMB: 0.6,\n      maxWidthOrHeight: 1000,\n      useWebWorker: true,\n    };\n    try {\n      const compressedFile = await imageCompression(imageFile, options);\n      // console.log(\n      //   \"compressedFile instanceof Blob\",\n      //   compressedFile instanceof Blob\n      // ); // true\n      // console.log(\n      //   `compressedFile size ${compressedFile.size / 1024 / 1024} MB`\n      // ); // smaller than maxSizeMB\n      // console.log({ compressedFile });\n      const res = await imageCompression.getDataUrlFromFile(compressedFile);\n      // console.log({ res });\n      setImage(res);\n\n      // await uploadToServer(compressedFile); // write your own logic\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // const changeImageUrl = (file) => {\n  //   let reader = new FileReader();\n  //   // setUrl(e.target.files[0]);\n  //   reader.onloadend = () => {\n  //     if (reader.result) {\n  //       setImage(reader.result);\n  //     } else setImage(\"\");\n  //   };\n  //   try {\n  //     reader.readAsDataURL(file);\n  //   } catch (error) {\n  //     setImage(\"\");\n  //   }\n  // };\n\n  const handleImage = (acceptedFile) => {\n    // console.log({ acceptedFile });\n    // changeImageUrl(acceptedFile[0]);\n    if (isFileImage(acceptedFile[0])) {\n      setImageFile(acceptedFile[0]);\n      handleImageUpload(acceptedFile[0]);\n    } else {\n      alert(\"Please upload only images\");\n    }\n  };\n\n  const [md, setMd] = useState(false);\n\n  const { setNewData, deleteAnswer } = useContext(GlobalContext);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let tempMark = question.answer;\n    if (text && text.length) {\n      tempMark += \"\\n\\n\" + text;\n    }\n    if (image && image.length) {\n      tempMark += `\\n\\n ![question-image](${image})`;\n    }\n    if (link && link.length) {\n      tempMark += `\\n\\n [${link}](${link})`;\n    }\n    if (imageEditor && !image && !image.length) {\n      alert(\"Please select an image to upload\");\n      return;\n    }\n    console.log({ tempMark });\n    setMarkdown(tempMark);\n    setMd(true);\n    setNewData(question, tempMark, questId);\n    setText(\"\");\n    setImage(\"\");\n    setLink(\"\");\n    setImageFile(null);\n  };\n\n  const handleClickDelete = () => {\n    //Delete answer from globalContext\n    deleteAnswer(question, questId);\n  };\n\n  return (\n    <Accordion className={styles.question}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-label=\"Expand\"\n        aria-controls=\"additional-actions3-content\"\n        id=\"additional-actions3-header\"\n      >\n        <FormControlLabel\n          aria-label=\"Acknowledge\"\n          onClick={(event) => event.stopPropagation()}\n          onFocus={(event) => event.stopPropagation()}\n          control={<Checkbox />}\n          checked={complete}\n          label={question.title}\n        />\n      </AccordionSummary>\n      <AccordionDetails>\n        <form onSubmit={handleSubmit} className={styles.detailsContainer}>\n          <div className={styles.prevAnswer}>\n            {question.answer ? (\n              <div className={styles.mdContainer}>\n                <ReactMarkdown>{question.answer}</ReactMarkdown>\n              </div>\n            ) : null}\n            {question.answer && (\n              <div className={styles.delIcon}>\n                <Tooltip placement=\"top\" title=\"Delete Answer\">\n                  <IconButton onClick={handleClickDelete}>\n                    <DeleteIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              </div>\n            )}\n          </div>\n\n          {textEditor && (\n            <textarea\n              required\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n              className={styles.inputField}\n              placeholder=\"Enter Text\"\n            />\n          )}\n          {imageEditor && (\n            <Dropzone\n              multiple={false}\n              onDrop={(acceptedFiles) => handleImage(acceptedFiles)}\n              accept=\".jpg, .jpeg, .png, .webp, .gif,\"\n            >\n              {({ getRootProps, getInputProps }) => (\n                <section>\n                  <div {...getRootProps()}>\n                    <input\n                      {...getInputProps()}\n                      className={styles.dropzoneInput}\n                    />\n                    <div className={styles.dropzone}>\n                      <AddPhotoAlternateIcon />\n                      <p>\n                        {imageFile\n                          ? `You selected ${imageFile.name}`\n                          : \"Drag n drop image or click to pick one\"}\n                      </p>\n                    </div>\n                  </div>\n                </section>\n              )}\n            </Dropzone>\n          )}\n          {linkEditor && (\n            <input\n              required\n              value={link}\n              onChange={(e) => setLink(e.target.value)}\n              className={styles.inputField}\n              placeholder=\"Enter Link\"\n            />\n          )}\n          {/* {md && <ReactMarkdown>{markdown}</ReactMarkdown>} */}\n          <div style={{ width: \"100%\", margin: \"10px 0\" }}>\n            <Grid container spacing={2}>\n              <Grid item md={4}>\n                <Button\n                  onClick={() => {\n                    setTextEditor(!textEditor);\n                    setText(\"\");\n                  }}\n                  variant=\"outlined\"\n                  className={styles.addOptionBtn}\n                >\n                  Text\n                </Button>\n              </Grid>\n              <Grid item md={4}>\n                <Button\n                  onClick={() => {\n                    setImageEditor(!imageEditor);\n                    setImage(\"\");\n                    setImageFile(null);\n                  }}\n                  variant=\"outlined\"\n                  className={styles.addOptionBtn}\n                >\n                  Image\n                </Button>\n              </Grid>\n              <Grid item md={4}>\n                <Button\n                  onClick={() => {\n                    setLinkEditor(!linkEditor);\n                    setLink(\"\");\n                  }}\n                  variant=\"outlined\"\n                  className={styles.addOptionBtn}\n                >\n                  Link\n                </Button>\n              </Grid>\n            </Grid>\n          </div>\n          <div className={styles.btnContainer}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              className={styles.submitBtn}\n            >\n              Submit\n            </Button>\n          </div>\n        </form>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default CustomAccordion;\n\nconst isFileImage = (file) => {\n  const acceptedImageTypes = [\n    \"image/jpeg\",\n    \"image/png\",\n    \"image/webp\",\n    \"image/jpg\",\n    \"image/gif\",\n  ];\n\n  return file && acceptedImageTypes.includes(file[\"type\"]);\n};\n","/home/anurag/vscode/React/exam-fire/src/Firebase/firebase.js",[],"/home/anurag/vscode/React/exam-fire/src/index.js",[],"/home/anurag/vscode/React/exam-fire/src/Assets/test.js",[],{"ruleId":"51","severity":1,"message":"52","line":13,"column":8,"nodeType":"53","messageId":"54","endLine":13,"endColumn":22},{"ruleId":"51","severity":1,"message":"55","line":19,"column":8,"nodeType":"53","messageId":"54","endLine":19,"endColumn":23},{"ruleId":"51","severity":1,"message":"56","line":42,"column":10,"nodeType":"53","messageId":"54","endLine":42,"endColumn":25},{"ruleId":"51","severity":1,"message":"57","line":42,"column":27,"nodeType":"53","messageId":"54","endLine":42,"endColumn":45},{"ruleId":"51","severity":1,"message":"58","line":43,"column":10,"nodeType":"53","messageId":"54","endLine":43,"endColumn":18},{"ruleId":"51","severity":1,"message":"59","line":43,"column":20,"nodeType":"53","messageId":"54","endLine":43,"endColumn":31},{"ruleId":"51","severity":1,"message":"60","line":22,"column":13,"nodeType":"53","messageId":"54","endLine":22,"endColumn":18},{"ruleId":"51","severity":1,"message":"61","line":106,"column":7,"nodeType":"53","messageId":"54","endLine":106,"endColumn":10},{"ruleId":"51","severity":1,"message":"58","line":32,"column":10,"nodeType":"53","messageId":"54","endLine":32,"endColumn":18},{"ruleId":"51","severity":1,"message":"62","line":90,"column":10,"nodeType":"53","messageId":"54","endLine":90,"endColumn":12},"no-unused-vars","'ExpandMoreIcon' is defined but never used.","Identifier","unusedVar","'ViewAnswerModal' is defined but never used.","'viewAnswerModal' is assigned a value but never used.","'setViewAnswerModal' is assigned a value but never used.","'markdown' is assigned a value but never used.","'setMarkdown' is assigned a value but never used.","'dbRef' is assigned a value but never used.","'QNo' is assigned a value but never used.","'md' is assigned a value but never used."]